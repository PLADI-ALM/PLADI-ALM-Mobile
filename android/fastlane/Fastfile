# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

platform :android do
  def increment_version_code
    path = '../app/build.gradle'
    re = /versionCode\s+(\d+)/

    s = File.read(path)
    versionCode = s[re, 1].to_i
    s[re, 1] = (versionCode + 1).to_s

    f = File.new(path, 'w')
    f.write(s)
    f.close
  end

  def increment_version_number(bump_type: nil, version_number: nil)
    path = '../app/build.gradle'
    re = /versionName\s+("\d+.\d+.\d+")/
    s = File.read(path)
    versionName = s[re, 1].gsub!('"', '').split('.')

    major = versionName[0].to_i
    minor = versionName[1].to_i
    patch = versionName[2].to_i

    if bump_type == 'major'
      major += 1
      minor = 0
      patch = 0
    elsif bump_type == 'minor'
      minor += 1
      patch = 0
    elsif bump_type == 'patch'
      patch += 1
    end

    s[re, 1] = if version_number
                 "\"#{version_number}\""
               else
                 "\"#{major}.#{minor}.#{patch}\""
               end

    f = File.new(path, 'w')
    f.write(s)
    f.close
    increment_version_code
  end

  def updateVersion(options)
    version = options[:version] || prompt(text: "Enter the version type or specific version\n(major, minor, patch or 1.0.0): ")

    re = /\d+.\d+.\d+/
    versionNum = version[re, 0]

    if versionNum
      increment_version_number(
        version_number: versionNum
      )
    elsif %w[major minor patch].include?(version)
      increment_version_number(
        bump_type: version
      )
    else
      UI.user_error!('[ERROR] Wrong version!!!!!!')
    end
  end

  lane :increase_version do
    yaml_file_path = "../..//pubspec.yaml"
    data = YAML.load_file(yaml_file_path)
    version = data["version"]

    # to_i는 to_integer를 의미하는 ruby 함수.
    version_number = data["version"].split(".")[0].to_i
    new_version_number = version_number + 1
    new_version = "#{new_version_number}.0.0+#{new_version_number}"

    data["version"] = new_version
    File.open(yaml_file_path, 'w') { |f| YAML.dump(data, f) }
  end


  desc 'Update version'
  lane :version do |options|
    updateVersion(options)
  end

  desc 'Submit a new Beta'
  lane :beta do |options|
    # gradle(task: 'clean bundleRelease')
    increase_version
    sh "flutter build appbundle"
    upload_to_play_store(
      skip_upload_metadata: true,
      skip_upload_screenshots: true,
      skip_upload_images: true,
      skip_upload_apk: true,
      track: 'internal',
      release_status: 'draft',
      aab: '../build/app/outputs/bundle/release/app-release.aab'
    )

    send_slack_test
  end

  desc 'Deploy a new version to the Google Play'
  lane :release do |options|
    # gradle(task: 'clean bundleRelease')
    increase_version
    sh "flutter build appbundle"
    upload_to_play_store(
      skip_upload_metadata: true,
      skip_upload_screenshots: true,
      skip_upload_images: true,
      skip_upload_apk: true,
      aab: '../build/app/outputs/bundle/release/app-release.aab'
    )

    send_slack_playstore
  end

  def send_slack_test
    yaml_file_path = "../..//pubspec.yaml"
    data = YAML.load_file(yaml_file_path)
    version = data["version"]

    slack(
      message: "안드로이드 앱이 Playstore(test)에 성공적으로 업로드 되었습니다.",
      channel: "#2-app-fastlane-android",
      slack_url: ENV["SLACK_WEBHOOK_URL"],
      payload: {
        "Version": version
      }
    )
  end

  def send_slack_playstore
    yaml_file_path = "../..//pubspec.yaml"
    data = YAML.load_file(yaml_file_path)
    version = data["version"]

    slack(
      message: "안드로이드 앱이 Playstore에 성공적으로 업로드 되었습니다.",
      channel: "#2-app-fastlane-android",
      slack_url: ENV["SLACK_WEBHOOK_URL"],
      payload: {
        "Version": version
      }
    )
  end
end